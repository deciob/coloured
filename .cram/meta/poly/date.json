{"absId":"poly/date","text":"/*\n\tpoly/date\n\n\tES5-ish Date shims for older browsers.\n\n\t(c) copyright 2011-2013 Brian Cavalier and John Hann\n\n\tThis module is part of the cujo.js family of libraries (http://cujojs.com/).\n\n\tLicensed under the MIT License at:\n\t\thttp://www.opensource.org/licenses/mit-license.php\n*/\n(function (origDate) {\ndefine(['./lib/_base'], function (base) {\n\n\tvar origProto,\n\t\torigParse,\n\t\tfeatureMap,\n\t\tmaxDate,\n\t\tinvalidDate,\n\t\tisoCompat,\n\t\tisoParseRx,\n\t\townProp,\n\t\tundef;\n\n\torigProto = origDate.prototype;\n\torigParse = origDate.parse;\n\n\townProp = Object.prototype.hasOwnProperty;\n\n\tmaxDate = 8.64e15;\n\tinvalidDate = NaN;\n\t// borrowed this from https://github.com/kriskowal/es5-shim\n\tisoCompat = function () { return origDate.parse('+275760-09-13T00:00:00.000Z') == maxDate; };\n\t// can't even have spaces in iso date strings\n\t// in Chrome and FF, the colon in the timezone is optional, but IE, Opera, and Safari need it\n\tisoParseRx = /^([+\\-]\\d{6}|\\d{4})(?:-(\\d{2}))?(?:-(\\d{2}))?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:.(\\d{1,3}))?)?(?:Z|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n\n\tfeatureMap = {\n\t\t'date-now': 'now',\n\t\t'date-tojson': 'toJSON',\n\t\t'date-toisostring': 'toISOString'\n\t};\n\n\tfunction has (feature) {\n\t\tvar prop = featureMap[feature];\n\t\treturn prop in origDate || prop in origProto;\n\t}\n\n\tif (!has('date-now')) {\n\t\torigDate.now = function () { return +(new Date); };\n\t}\n\n\tfunction isInvalidDate (date) {\n\t\treturn !isFinite(date);\n\t}\n\n\tfunction fix2 (number) {\n\t\t// ensures number is formatted to at least two digits\n\t\treturn (number < 10 ? '0' : '') + number;\n\t}\n\n\tfunction isoParse (str) {\n\t\t// parses simplified iso8601 dates, such as\n\t\t// yyyy-mm-ddThh:mm:ssZ\n\t\t// +yyyyyy-mm-ddThh:mm:ss-06:30\n\t\tvar result;\n\n\t\t// prepare for the worst\n\t\tresult = invalidDate;\n\n\t\t// fast parse\n\t\tstr.replace(isoParseRx, function (a, y, m, d, h, n, s, ms, tzs, tzh, tzm) {\n\t\t\tvar adjust = 0;\n\n\t\t\t// Date.UTC handles years between 0 and 100 as 2-digit years, but\n\t\t\t// that's not what we want with iso dates. If we move forward\n\t\t\t// 400 years -- a full cycle in the Gregorian calendar -- then\n\t\t\t// subtract the 400 years (as milliseconds) afterwards, we can avoid\n\t\t\t// this problem. (learned of this trick from kriskowal/es5-shim.)\n\t\t\tif (y >= 0 && y < 100) {\n\t\t\t\ty = +y + 400; // convert to number\n\t\t\t\tadjust = -126227808e5; // 400 years\n\t\t\t}\n\n\t\t\tresult = Date.UTC(y, (m || 1) - 1, d || 1, h || 0, n || 0, s || 0, ms || 0) + adjust;\n\n\t\t\ttzh = +(tzs + tzh); // convert to signed number\n\t\t\ttzm = +(tzs + tzm); // convert to signed number\n\n\t\t\tif (tzh || tzm) {\n\t\t\t\tresult -= (tzh + tzm / 60) * 36e5;\n\t\t\t\t// check if time zone is out of bounds\n\t\t\t\tif (tzh > 23 || tzh < -23 || tzm > 59) result = invalidDate;\n\t\t\t\t// check if time zone pushed us over maximum date value\n\t\t\t\tif (result > maxDate) result = invalidDate;\n\t\t\t}\n\n\t\t\treturn ''; // reduces memory used\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tif (!has('date-toisostring')) {\n\n\t\torigProto.toISOString = function toIsoString () {\n\t\t\tif (isInvalidDate(this)) {\n\t\t\t\tthrow new RangeError(\"toISOString called on invalid value\");\n\t\t\t}\n\t\t\treturn [\n\t\t\t\tthis.getUTCFullYear(), '-',\n\t\t\t\tfix2(this.getUTCMonth() + 1), '-',\n\t\t\t\tfix2(this.getUTCDate()), 'T',\n\t\t\t\tfix2(this.getUTCHours()), ':',\n\t\t\t\tfix2(this.getUTCMinutes()), ':',\n\t\t\t\tfix2(this.getUTCSeconds()), '.',\n\t\t\t\t(this.getUTCMilliseconds()/1000).toFixed(3).slice(2), 'Z'\n\t\t\t].join('');\n\t\t};\n\n\t}\n\n\tif (!has('date-tojson')) {\n\n\t\torigProto.toJSON = function toJSON (key) {\n\t\t\t// key arg is ignored by Date objects, but since this function\n\t\t\t// is generic, other Date-like objects could use the key arg.\n\t\t\t// spec says to throw a TypeError if toISOString is not callable\n\t\t\t// but that's what happens anyways, so no need for extra code.\n\t\t\treturn this.toISOString();\n\t\t};\n\t}\n\n\tfunction checkIsoCompat () {\n\t\t// fix Date constructor\n\n\t\tvar newDate = (function () {\n\t\t\t// Replacement Date constructor\n\t\t\treturn function Date (y, m, d, h, mn, s, ms) {\n\t\t\t\tvar len, result;\n\n\t\t\t\t// Date called as function, not constructor\n\t\t\t\tif (!(this instanceof newDate)) return origDate.apply(this, arguments);\n\n\t\t\t\tlen = arguments.length;\n\n\t\t\t\tif (len === 0) {\n\t\t\t\t\tresult = new origDate();\n\t\t\t\t}\n\t\t\t\telse if (len === 1) {\n\t\t\t\t\tresult = new origDate(base.isString(y) ? newDate.parse(y) : y);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = new origDate(y, m, d == undef ? 1 : d, h || 0, mn || 0, s || 0, ms || 0);\n\t\t\t\t}\n\n\t\t\t\tresult.constructor = newDate;\n\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}());\n\n\t\tif (!isoCompat()) {\n\n\t\t\tnewDate.now = origDate.now;\n\t\t\tnewDate.UTC = origDate.UTC;\n\t\t\tnewDate.prototype = origProto;\n\t\t\tnewDate.prototype.constructor = newDate;\n\n\t\t\tnewDate.parse = function parse (str) {\n\t\t\t\tvar result;\n\n\t\t\t\t// check for iso date\n\t\t\t\tresult = isoParse('' + str);\n\n\t\t\t\tif (isInvalidDate(result)) {\n\t\t\t\t\t// try original parse()\n\t\t\t\t\tresult = origParse(str);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t};\n\n\t\t\t// Unfortunate. See cujojs/poly#11\n\t\t\t// Copy any owned props that may have been previously added to\n\t\t\t// the Date constructor by 3rd party libs.\n\t\t\tcopyPropsSafely(newDate, origDate);\n\n\t\t\tDate = newDate;\n\t\t}\n\t\telse if (Date != origDate) {\n\t\t\tDate = origDate;\n\t\t}\n\n\t}\n\n\tfunction copyPropsSafely(dst, src) {\n\t\tfor (var p in src) {\n\t\t\tif (ownProp.call(src, p) && !ownProp.call(dst, p)) {\n\t\t\t\tdst[p] = src[p];\n\t\t\t}\n\t\t}\n\t}\n\n\tcheckIsoCompat();\n\n\treturn {\n\t\tsetIsoCompatTest: function (testFunc) {\n\t\t\tisoCompat = testFunc;\n\t\t\tcheckIsoCompat();\n\t\t}\n\t};\n\n});\n}(Date));\n","modules":[{"pos":305,"count":40,"depList":["poly/lib/_base"],"factory":true,"argList":["base"],"id":"poly/date"}]}