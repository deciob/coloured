{"absId":"poly/setImmediate","text":"/**\n * setImmediate polyfill / shim\n *\n * (c) copyright 2011-2013 Brian Cavalier and John Hann\n *\n * poly is part of the cujo.js family of libraries (http://cujojs.com/)\n *\n * Based on NobleJS's setImmediate. (https://github.com/NobleJS/setImmediate)\n *\n * Licensed under the MIT License at:\n *      http://www.opensource.org/licenses/mit-license.php\n *\n */\n(function (global) {\ndefine(['./lib/_base'], function (base) {\n\n\tvar testCache,\n\t\ttasks;\n\n\ttestCache = {};\n\ttasks = (function () {\n\t\tvar nextHandle,\n\t\t\ttasksByHandle,\n\t\t\tcurrentlyRunningATask;\n\n\t\tnextHandle = 1; // Spec says greater than zero\n\t\ttasksByHandle = {};\n\t\tcurrentlyRunningATask = false;\n\n\t\tfunction Task (handler, args) {\n\t\t\tthis.handler = handler;\n\t\t\tthis.args = Array.prototype.slice.call(args);\n\t\t}\n\n\t\tTask.prototype.run = function () {\n\t\t\t// See steps in section 5 of the spec.\n\t\t\tif (base.isFunction(this.handler)) {\n\t\t\t\t// Choice of `thisArg` is not in the setImmediate spec; `undefined` is in the setTimeout spec though:\n\t\t\t\t// http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html\n\t\t\t\tthis.handler.apply(undefined, this.args);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar scriptSource = '' + this.handler;\n\t\t\t\teval(scriptSource);\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\taddFromSetImmediateArguments: function (args) {\n\t\t\t\tvar handler,\n\t\t\t\t\targsToHandle,\n\t\t\t\t\ttask,\n\t\t\t\t\tthisHandle;\n\n\t\t\t\thandler = args[0];\n\t\t\t\targsToHandle = Array.prototype.slice.call(args, 1);\n\t\t\t\ttask = new Task(handler, argsToHandle);\n\n\t\t\t\tthisHandle = nextHandle++;\n\t\t\t\ttasksByHandle[thisHandle] = task;\n\t\t\t\treturn thisHandle;\n\t\t\t},\n\t\t\trunIfPresent: function (handle) {\n\t\t\t\t// From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n\t\t\t\t// So if we're currently running a task, we'll need to delay this invocation.\n\t\t\t\tif (!currentlyRunningATask) {\n\t\t\t\t\tvar task = tasksByHandle[handle];\n\t\t\t\t\tif (task) {\n\t\t\t\t\t\tcurrentlyRunningATask = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttask.run();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tdelete tasksByHandle[handle];\n\t\t\t\t\t\t\tcurrentlyRunningATask = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t\t\t\t\t// \"too much recursion\" error.\n\t\t\t\t\tglobal.setTimeout(function () {\n\t\t\t\t\t\ttasks.runIfPresent(handle);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t},\n\t\t\tremove: function (handle) {\n\t\t\t\tdelete tasksByHandle[handle];\n\t\t\t}\n\t\t};\n\t}());\n\n\tfunction has (name) {\n\t\tif (base.isFunction(testCache[name])) {\n\t\t\ttestCache[name] = testCache[name](global);\n\t\t}\n\t\treturn testCache[name];\n\t}\n\n\tfunction add (name, test, now) {\n\t\ttestCache[name] = now ? test(global, d, el) : test;\n\t}\n\n\tfunction aliasMicrosoftImplementation (attachTo) {\n\t\tattachTo.setImmediate = global.msSetImmediate;\n\t\tattachTo.clearImmediate = global.msClearImmediate;\n\t}\n\n\tfunction installPostMessageImplementation (attachTo) {\n\t\t// Installs an event handler on `global` for the `message` event: see\n\t\t// * https://developer.mozilla.org/en/DOM/window.postMessage\n\t\t// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n\t\tvar MESSAGE_PREFIX = 'cujojs/poly.setImmediate' + Math.random();\n\n\t\tfunction isStringAndStartsWith (string, putativeStart) {\n\t\t\treturn typeof string === 'string' && string.substring(0, putativeStart.length) === putativeStart;\n\t\t}\n\n\t\tfunction onGlobalMessage (event) {\n\t\t\t// This will catch all incoming messages (even from other windows!), so we need to try reasonably hard to\n\t\t\t// avoid letting anyone else trick us into firing off. We test the origin is still this window, and that a\n\t\t\t// (randomly generated) unpredictable identifying prefix is present.\n\t\t\tif (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {\n\t\t\t\tvar handle = event.data.substring(MESSAGE_PREFIX.length);\n\t\t\t\ttasks.runIfPresent(handle);\n\t\t\t}\n\t\t}\n\t\tglobal.addEventListener('message', onGlobalMessage, false);\n\n\t\tattachTo.setImmediate = function () {\n\t\t\tvar handle = tasks.addFromSetImmediateArguments(arguments);\n\n\t\t\t// Make `global` post a message to itself with the handle and identifying prefix, thus asynchronously\n\t\t\t// invoking our onGlobalMessage listener above.\n\t\t\tglobal.postMessage(MESSAGE_PREFIX + handle, '*');\n\t\t\treturn handle;\n\t\t};\n\t}\n\n\tfunction installReadyStateChangeImplementation(attachTo) {\n\t\tattachTo.setImmediate = function () {\n\t\t\tvar handle = tasks.addFromSetImmediateArguments(arguments);\n\n\t\t\t// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t\t\t// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t\t\tvar scriptEl = global.document.createElement('script');\n\t\t\tscriptEl.onreadystatechange = function () {\n\t\t\t\ttasks.runIfPresent(handle);\n\n\t\t\t\tscriptEl.onreadystatechange = null;\n\t\t\t\tscriptEl.parentNode.removeChild(scriptEl);\n\t\t\t\tscriptEl = null;\n\t\t\t};\n\t\t\tglobal.document.documentElement.appendChild(scriptEl);\n\t\t\treturn handle;\n\t\t};\n\t}\n\n\tfunction installSetTimeoutImplementation(attachTo) {\n\t\tattachTo.setImmediate = function () {\n\t\t\tvar handle = tasks.addFromSetImmediateArguments(arguments);\n\n\t\t\tglobal.setTimeout(function () {\n\t\t\t\ttasks.runIfPresent(handle);\n\t\t\t}, 0);\n\t\t\treturn handle;\n\t\t};\n\t}\n\n\tadd('setimmediate', function (g) {\n\t\treturn base.isFunction(g.setImmediate);\n\t});\n\n\tadd('ms-setimmediate', function (g) {\n\t\treturn base.isFunction(g.msSetImmediate);\n\t});\n\n\tadd('post-message', function (g) {\n\t\t// Note: this is only for the async postMessage, not the buggy sync\n\t\t// version in IE8\n\t\tvar postMessageIsAsynchronous,\n\t\t\toldOnMessage;\n\n\t\tpostMessageIsAsynchronous = true;\n\t\toldOnMessage = g.onmessage;\n\n\t\tif (!g.postMessage) {\n\t\t\treturn false;\n\t\t}\n\n\t\tg.onmessage = function () {\n\t\t\tpostMessageIsAsynchronous = false;\n\t\t};\n\t\tg.postMessage('', '*');\n\t\tg.onmessage = oldOnMessage;\n\t\treturn postMessageIsAsynchronous;\n\t});\n\n\tadd('script-onreadystatechange', function (g) {\n\t\treturn 'document' in g && 'onreadystatechange' in g.document.createElement('script');\n\t});\n\n\tif (!has('setimmediate')) {\n\t\tif (has('ms-setimmediate')) {\n\t\t\taliasMicrosoftImplementation(global);\n\t\t}\n\t\telse {\n\t\t\tif (has('post-message')) {\n\t\t\t\tinstallPostMessageImplementation(global);\n\t\t\t}\n\t\t\telse if (has('script-onreadystatechange')) {\n\t\t\t\tinstallReadyStateChangeImplementation(global);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t installSetTimeoutImplementation(global);\n\t\t\t}\n\t\t\tglobal.clearImmediate = tasks.remove;\n\t\t}\n\t}\n});\n}(this.global || this));\n","modules":[{"pos":379,"count":40,"depList":["poly/lib/_base"],"factory":true,"argList":["base"],"id":"poly/setImmediate"}]}