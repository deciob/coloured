{"absId":"poly/function","text":"/**\n * Function polyfill / shims\n *\n * (c) copyright 2011-2013 Brian Cavalier and John Hann\n *\n * This module is part of the cujo.js family of libraries (http://cujojs.com/).\n *\n * Licensed under the MIT License at:\n * \t\thttp://www.opensource.org/licenses/mit-license.php\n */\ndefine (['./lib/_base'], function (base) {\n\"use strict\";\n\n\tvar bind,\n\t\tslice = [].slice,\n\t\tproto = Function.prototype,\n\t\tfeatureMap;\n\n\tfeatureMap = {\n\t\t'function-bind': 'bind'\n\t};\n\n\tfunction has (feature) {\n\t\tvar prop = featureMap[feature];\n\t\treturn base.isFunction(proto[prop]);\n\t}\n\n\t// check for missing features\n\tif (!has('function-bind')) {\n\t\t// adapted from Mozilla Developer Network example at\n\t\t// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\n\t\tbind = function bind (obj) {\n\t\t\tvar args = slice.call(arguments, 1),\n\t\t\t\tself = this,\n\t\t\t\tnop = function () {},\n\t\t\t\tbound = function () {\n\t\t\t\t  return self.apply(this instanceof nop ? this : (obj || {}), args.concat(slice.call(arguments)));\n\t\t\t\t};\n\t\t\tnop.prototype = this.prototype || {}; // Firefox cries sometimes if prototype is undefined\n\t\t\tbound.prototype = new nop();\n\t\t\treturn bound;\n\t\t};\n\t\tproto.bind = bind;\n\t}\n\n\treturn {};\n\n});\n","modules":[{"pos":276,"count":41,"depList":["poly/lib/_base"],"factory":true,"argList":["base"],"id":"poly/function"}]}