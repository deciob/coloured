{"absId":"poly/object","text":"/**\n * Object polyfill / shims\n *\n * (c) copyright 2011-2013 Brian Cavalier and John Hann\n *\n * This module is part of the cujo.js family of libraries (http://cujojs.com/).\n *\n * Licensed under the MIT License at:\n * \t\thttp://www.opensource.org/licenses/mit-license.php\n */\n/**\n * The goal of these shims is to emulate a JavaScript 1.8.5+ environments as\n * much as possible.  While it's not feasible to fully shim Object,\n * we can try to maximize code compatibility with older js engines.\n *\n * Note: these shims cannot fix `for (var p in obj) {}`. Instead, use this:\n *     Object.keys(obj).forEach(function (p) {}); // shimmed Array\n *\n * Also, these shims can't prevent writing to object properties.\n *\n * If you want your code to fail loudly if a shim can't mimic ES5 closely\n * then set the AMD loader config option `failIfShimmed`.  Possible values\n * for `failIfShimmed` include:\n *\n * true: fail on every shimmed Object function\n * false: fail never\n * function: fail for shims whose name returns true from function (name) {}\n *\n * By default, no shims fail.\n *\n * The following functions are safely shimmed:\n * create (unless the second parameter is specified since that calls defineProperties)\n * keys\n * getOwnPropertyNames\n * getPrototypeOf\n * isExtensible\n *\n * In order to play nicely with several third-party libs (including Promises/A\n * implementations), the following functions don't fail by default even though\n * they can't be correctly shimmed:\n * freeze\n * seal\n * isFrozen\n * isSealed\n *\n * Note: this shim doesn't do anything special with IE8's minimally useful\n * Object.defineProperty(domNode).\n *\n * The poly/strict module will set failIfShimmed to fail for some shims.\n * See the documentation for more information.\n *\n * IE missing enum properties fixes copied from kangax:\n * https://github.com/kangax/protolicious/blob/master/experimental/object.for_in.js\n *\n * TODO: fix Object#propertyIsEnumerable for IE's non-enumerable props to match Object.keys()\n */\ndefine(['./lib/_base'], function (base) {\n\"use strict\";\n\n\tvar refObj,\n\t\trefProto,\n\t\thas__proto__,\n\t\thasNonEnumerableProps,\n\t\tgetPrototypeOf,\n\t\tkeys,\n\t\tfeatureMap,\n\t\tshims,\n\t\tsecrets,\n\t\tprotoSecretProp,\n\t\thasOwnProp = 'hasOwnProperty',\n\t\tundef;\n\n\trefObj = Object;\n\trefProto = refObj.prototype;\n\n\thas__proto__ = typeof {}.__proto__ == 'object';\n\n\thasNonEnumerableProps = (function () {\n\t\tfor (var p in { valueOf: 1 }) return false;\n\t\treturn true;\n\t}());\n\n\t// TODO: this still doesn't work for IE6-8 since object.constructor && object.constructor.prototype are clobbered/replaced when using `new` on a constructor that has a prototype. srsly.\n\t// devs will have to do the following if they want this to work in IE6-8:\n\t// Ctor.prototype.constructor = Ctor\n\tgetPrototypeOf = has__proto__\n\t\t? function (object) { assertIsObject(object); return object.__proto__; }\n\t\t: function (object) {\n\t\t\tassertIsObject(object);\n\t\t\treturn protoSecretProp && object[protoSecretProp](secrets)\n\t\t\t\t? object[protoSecretProp](secrets.proto)\n\t\t\t\t: object.constructor ? object.constructor.prototype : refProto;\n\t\t};\n\n\tkeys = !hasNonEnumerableProps\n\t\t? _keys\n\t\t: (function (masked) {\n\t\t\treturn function (object) {\n\t\t\t\tvar result = _keys(object), i = 0, m;\n\t\t\t\twhile (m = masked[i++]) {\n\t\t\t\t\tif (hasProp(object, m)) result.push(m);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}([ 'constructor', hasOwnProp, 'isPrototypeOf', 'propertyIsEnumerable', 'toString', 'toLocaleString', 'valueOf' ]));\n\n\tfeatureMap = {\n\t\t'object-create': 'create',\n\t\t'object-freeze': 'freeze',\n\t\t'object-isfrozen': 'isFrozen',\n\t\t'object-seal': 'seal',\n\t\t'object-issealed': 'isSealed',\n\t\t'object-getprototypeof': 'getPrototypeOf',\n\t\t'object-keys': 'keys',\n\t\t'object-getownpropertynames': 'getOwnPropertyNames',\n\t\t'object-defineproperty': 'defineProperty',\n\t\t'object-defineproperties': 'defineProperties',\n\t\t'object-isextensible': 'isExtensible',\n\t\t'object-preventextensions': 'preventExtensions',\n\t\t'object-getownpropertydescriptor': 'getOwnPropertyDescriptor'\n\t};\n\n\tshims = {};\n\n\tsecrets = {\n\t\tproto: {}\n\t};\n\n\tprotoSecretProp = !has('object-getprototypeof') && !has__proto__ && hasNonEnumerableProps && hasOwnProp;\n\n\tfunction createFlameThrower (feature) {\n\t\treturn function () {\n\t\t\tthrow new Error('poly/object: ' + feature + ' is not safely supported.');\n\t\t}\n\t}\n\n\tfunction has (feature) {\n\t\tvar prop = featureMap[feature];\n\t\treturn prop in refObj;\n\t}\n\n\tfunction PolyBase () {}\n\n\t// for better compression\n\tfunction hasProp (object, name) {\n\t\treturn object.hasOwnProperty(name);\n\t}\n\n\tfunction _keys (object) {\n\t\tvar result = [];\n\t\tfor (var p in object) {\n\t\t\tif (hasProp(object, p)) {\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t// we might create an owned property to hold the secrets, but make it look\n\t// like it's not an owned property.  (affects getOwnPropertyNames, too)\n\tif (protoSecretProp) (function (_hop) {\n\t\trefProto[hasOwnProp] = function (name) {\n\t\t\tif (name == protoSecretProp) return false;\n\t\t\treturn _hop.call(this, name);\n\t\t};\n\t}(refProto[hasOwnProp]));\n\n\tif (!has('object-create')) {\n\t\tObject.create = shims.create = function create (proto, props) {\n\t\t\tvar obj;\n\n\t\t\tif (typeof proto != 'object') throw new TypeError('prototype is not of type Object or Null.');\n\n\t\t\tPolyBase.prototype = proto;\n\t\t\tobj = new PolyBase();\n\t\t\tPolyBase.prototype = null;\n\n\t\t\t// provide a mechanism for retrieving the prototype in IE 6-8\n\t\t\tif (protoSecretProp) {\n\t\t\t\tvar orig = obj[protoSecretProp];\n\t\t\t\tobj[protoSecretProp] = function (name) {\n\t\t\t\t\tif (name == secrets) return true; // yes, we're using secrets\n\t\t\t\t\tif (name == secrets.proto) return proto;\n\t\t\t\t\treturn orig.call(this, name);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\t// defineProperties could throw depending on `failIfShimmed`\n\t\t\t\tObject.defineProperties(obj, props);\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t};\n\t}\n\n\tif (!has('object-freeze')) {\n\t\tObject.freeze = shims.freeze = function freeze (object) {\n\t\t\treturn object;\n\t\t};\n\t}\n\n\tif (!has('object-isfrozen')) {\n\t\tObject.isFrozen = shims.isFrozen = function isFrozen (object) {\n\t\t\treturn false;\n\t\t};\n\t}\n\n\tif (!has('object-seal')) {\n\t\tObject.seal = shims.seal = function seal (object) {\n\t\t\treturn object;\n\t\t};\n\t}\n\n\tif (!has('object-issealed')) {\n\t\tObject.isSealed = shims.isSealed = function isSealed (object) {\n\t\t\treturn false;\n\t\t};\n\t}\n\n\tif (!has('object-getprototypeof')) {\n\t\tObject.getPrototypeOf = shims.getPrototypeOf = getPrototypeOf;\n\t}\n\n\tif (!has('object-keys')) {\n\t\tObject.keys = keys;\n\t}\n\n\tif (!has('object-getownpropertynames')) {\n\t\tObject.getOwnPropertyNames = shims.getOwnPropertyNames = function getOwnPropertyNames (object) {\n\t\t\treturn keys(object);\n\t\t};\n\t}\n\n\tif (!has('object-defineproperty') || !has('object-defineproperties')) {\n\t\tObject.defineProperty = shims.defineProperty = function defineProperty (object, name, descriptor) {\n\t\t\tobject[name] = descriptor && descriptor.value;\n\t\t\treturn object;\n\t\t};\n\t}\n\n\tif (!has('object-defineproperties') || !has('object-create')) {\n\t\tObject.defineProperties = shims.defineProperties = function defineProperties (object, descriptors) {\n\t\t\tvar names, name;\n\t\t\tnames = keys(descriptors);\n\t\t\twhile ((name = names.pop())) {\n\t\t\t\tObject.defineProperty(object, name, descriptors[name]);\n\t\t\t}\n\t\t\treturn object;\n\t\t};\n\t}\n\n\tif (!has('object-isextensible')) {\n\t\tObject.isExtensible = shims.isExtensible = function isExtensible (object) {\n\t\t\tvar prop = '_poly_';\n\t\t\ttry {\n\t\t\t\t// create unique property name\n\t\t\t\twhile (prop in object) prop += '_';\n\t\t\t\t// try to set it\n\t\t\t\tobject[prop] = 1;\n\t\t\t\treturn hasProp(object, prop);\n\t\t\t}\n\t\t\tcatch (ex) { return false; }\n\t\t\tfinally {\n\t\t\t\ttry { delete object[prop]; } catch (ex) { /* squelch */ }\n\t\t\t}\n\t\t};\n\t}\n\n\tif (!has('object-preventextensions')) {\n\t\tObject.preventExtensions = shims.preventExtensions = function preventExtensions (object) {\n\t\t\treturn object;\n\t\t};\n\t}\n\n\tif (!has('object-getownpropertydescriptor')) {\n\t\tObject.getOwnPropertyDescriptor = shims.getOwnPropertyDescriptor = function getOwnPropertyDescriptor (object, name) {\n\t\t\treturn hasProp(object, name)\n\t\t\t\t? {\n\t\t\t\t\tvalue: object[name],\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t\t: undef;\n\t\t};\n\t}\n\n\tfunction failIfShimmed (failTest) {\n\t\tvar shouldThrow;\n\n\t\tif (typeof failTest == 'function') {\n\t\t\tshouldThrow = failTest;\n\t\t}\n\t\telse {\n\t\t\t// assume truthy/falsey\n\t\t\tshouldThrow = function () { return failTest; };\n\t\t}\n\n\t\t// create throwers for some features\n\t\tfor (var feature in shims) {\n\t\t\tObject[feature] = shouldThrow(feature)\n\t\t\t\t? createFlameThrower(feature)\n\t\t\t\t: shims[feature];\n\t\t}\n\t}\n\n\tfunction assertIsObject (o) { if (typeof o != 'object') throw new TypeError('Object.getPrototypeOf called on non-object'); }\n\n\treturn {\n\t\tfailIfShimmed: failIfShimmed\n\t};\n\n});\n","modules":[{"pos":1990,"count":40,"depList":["poly/lib/_base"],"factory":true,"argList":["base"],"id":"poly/object"}]}