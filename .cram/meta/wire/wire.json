{"absId":"wire/wire","text":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/*jshint sub:true*/\n\n/**\n * wire\n * Javascript IOC Container\n *\n * wire is part of the cujo.js family of libraries (http://cujojs.com/)\n *\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @version 0.9.4\n */\n(function(global, define){\ndefine(['require', 'when', './lib/context'], function(require, when, createContext) {\n\n\t\"use strict\";\n\n\tvar rootSpec, rootContext, rootOptions;\n\n\twire.version = \"0.9.4\";\n\n\trootSpec = global['wire'] || {};\n\trootOptions = { require: require };\n\n\t//\n\t// Module API\n\t//\n\n\t/**\n\t * The top-level wire function that wires contexts as direct children\n\t * of the (possibly implicit) root context.  It ensures that the root\n\t * context has been wired before wiring children.\n\t *\n\t * @public\n\t *\n\t * @param spec {Object|String|Array|Promise} can be any one of the following:\n\t *  1. Object - wiring spec\n\t *  2. String - module id of the wiring spec to load and then wire\n\t *  3. Array - mixed array of Strings and Objects, each of which is either\n\t *   a wiring spec, or the module id of a wiring spec\n\t *  4. Promise - a promise for any of the above\n\t *  @param options {Object} wiring options\n\t *  @param [options.require] {Function} the platform loader function.  Wire will\n\t *   attempt to automatically detect what loader to use (AMD, CommonJS, etc.), but\n\t *   if you want to explicitly provide it, you can do so.  In some cases this can\n\t *   be useful such as providing a local AMD require function so that module ids\n\t *   *within the wiring spec* can be relative.\n\t *  @return {Promise} a promise for the resulting wired context\n\t */\n\tfunction wire(spec, options) {\n\n\t\t// If the root context is not yet wired, wire it first\n\t\tif (!rootContext) {\n\t\t\trootContext = createContext(rootSpec, null, rootOptions);\n\t\t}\n\n\t\t// Use the rootContext to wire all new contexts.\n\t\treturn when(rootContext,\n\t\t\tfunction (root) {\n\t\t\t\treturn root.wire(spec, options);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * AMD Loader plugin API\n\t * @param name {String} spec module id, or comma-separated list of module ids\n\t * @param require {Function} loader-provide local require function\n\t * @param callback {Function} callback to call when wiring is completed. May have\n\t *  and error property that a function to call to inform the AMD loader of an error.\n\t *  See here: https://groups.google.com/forum/?fromgroups#!topic/amd-implement/u0f161drdJA\n\t */\n\twire.load = function amdLoad(name, require, callback /*, config */) {\n\t\t// If it's a string, try to split on ',' since it could be a comma-separated\n\t\t// list of spec module ids\n\t\tvar errback = callback.error || function(e) {\n\t\t\t// Throw uncatchable exception for loaders that don't support\n\t\t\t// AMD error handling.  This will propagate up to the host environment\n\t\t\tsetTimeout(function() { throw e; }, 0);\n\t\t};\n\n\t\twhen(wire(name.split(','), { require: require }), callback, errback);\n\t};\n\n\t/**\n\t * AMD Builder plugin API\n\t */\n\t// pluginBuilder: './build/amd/builder'\n\t// cram > v0.2 will support pluginBuilder property\n\twire['pluginBuilder'] = './build/amd/builder';\n\n\treturn wire;\n\n});\n})(this,\n\ttypeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(deps, factory) {\n\t\tmodule.exports = factory.apply(this, [require].concat(deps.slice(1).map(function(x) {\n\t\t\treturn require(x);\n\t\t})));\n\t}\n);","modules":[{"pos":346,"count":84,"depList":["require","when/when","wire/lib/context"],"factory":true,"argList":["require","when","createContext"],"id":"wire/wire"}]}