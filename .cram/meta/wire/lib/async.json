{"absId":"wire/lib/async","text":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){\ndefine(function(require) {\n\t\"use strict\";\n\n\tvar when, array;\n\n\twhen = require('when');\n\tarray = require('./array');\n\n\treturn {\n\t\tsequence: sequence,\n\t\tuntil: until\n\t};\n\n\t/**\n\t * Run the supplied async tasks in sequence, with no overlap.\n\t * @param tasks {Array} array of functions\n\t * @return {Promise} promise that resolves when all tasks\n\t * have completed\n\t */\n\tfunction sequence(tasks /*, args... */) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\treturn when.reduce(tasks, function(results, task) {\n\t\t\treturn when(task.apply(null, args), function(result) {\n\t\t\t\tresults.push(result);\n\t\t\t\treturn results;\n\t\t\t});\n\t\t}, []);\n\t};\n\n\tfunction until(work, interval, verifier) {\n\n\t\tvar deferred = when.defer();\n\n\t\tverifier = verifier || function () { return false; };\n\n\t\tfunction schedule() {\n\t\t\tsetTimeout(vote, interval);\n\t\t}\n\n\t\tfunction vote() {\n\t\t\twhen(work(),\n\t\t\t\tfunction (result) {\n\t\t\t\t\twhen(verifier(result), handleNext, schedule);\n\n\t\t\t\t\tfunction handleNext(verification) {\n\t\t\t\t\t\treturn verification ? deferred.resolve(result) : schedule();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdeferred.reject\n\t\t\t);\n\t\t}\n\n\t\tschedule();\n\n\t\treturn deferred.promise;\n\t}\n\n\n});\n})(typeof define == 'function' && define.amd ? define : function(factory) { module.exports = factory(require); });","modules":[{"pos":183,"count":25,"factory":true,"argList":["require"],"requires":[{"id":"when/when","pos":253,"count":15},{"id":"wire/lib/array","pos":279,"count":18}],"id":"wire/lib/async"}]}