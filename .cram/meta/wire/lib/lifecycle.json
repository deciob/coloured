{"absId":"wire/lib/lifecycle","text":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){\ndefine(['when'], function(when) {\n\n\t\"use strict\";\n\n\tvar lifecyclePhases, phase;\n\n\tlifecyclePhases = {\n\t\tinit: generateSteps(['create', 'configure', 'initialize']),\n\t\tstartup: generateSteps(['connect', 'ready']),\n\t\tshutdown: generateSteps(['destroy'])\n\t};\n\n\tfunction Lifecycle(config) {\n\t\tthis._config = config;\n\t}\n\n\t// Generate prototype from lifecyclePhases\n\tfor(phase in lifecyclePhases) {\n\t\tLifecycle.prototype[phase] = createLifecyclePhase(phase);\n\t}\n\n\treturn Lifecycle;\n\n\t/**\n\t * Generate a method to process all steps in a lifecycle phase\n\t * @param phase\n\t * @return {Function}\n\t */\n\tfunction createLifecyclePhase(phase) {\n\t\tvar steps = lifecyclePhases[phase];\n\n\t\treturn function(proxy) {\n\t\t\tvar self = this;\n\t\t\treturn when.reduce(steps, function (unused, step) {\n\t\t\t\treturn processFacets(step, proxy, self._config);\n\t\t\t}, proxy);\n\t\t};\n\t}\n\n\tfunction processFacets(step, proxy, config) {\n\t\tvar promises, options, name, spec, facets;\n\t\t\n\t\tpromises = [];\n\t\tspec = proxy.spec;\n\n\t\tfacets = config.facets;\n\n\t\tfor (name in facets) {\n\t\t\toptions = spec[name];\n\t\t\tif (options) {\n\t\t\t\tprocessStep(promises, facets[name], step, proxy, options, config.pluginApi);\n\t\t\t}\n\t\t}\n\n\t\treturn when.all(promises).then(function () {\n\t\t\treturn processListeners(step, proxy, config);\n\t\t}).then(function() {\n\t\t\treturn proxy;\n\t\t});\n\t}\n\n\tfunction processListeners(step, proxy, config) {\n\t\tvar listeners, listenerPromises;\n\n\t\tlisteners = config.listeners;\n\t\tlistenerPromises = [];\n\n\t\tfor (var i = 0; i < listeners.length; i++) {\n\t\t\tprocessStep(listenerPromises, listeners[i], step, proxy, {}, config.pluginApi);\n\t\t}\n\n\t\treturn when.all(listenerPromises);\n\t}\n\n\tfunction processStep(promises, processor, step, proxy, options, pluginApi) {\n\t\tvar facet, facetPromise;\n\n\t\tif (processor && processor[step]) {\n\t\t\tfacetPromise = when.defer();\n\t\t\tpromises.push(facetPromise.promise);\n\n\t\t\tfacet = Object.create(proxy);\n\t\t\tfacet.options = options;\n\t\t\tprocessor[step](facetPromise.resolver, facet, pluginApi);\n\t\t}\n\t}\n\n\tfunction generateSteps(steps) {\n\t\treturn steps.reduce(reduceSteps, []);\n\t}\n\n\tfunction reduceSteps(lifecycle, step) {\n\t\tlifecycle.push(step + ':before');\n\t\tlifecycle.push(step);\n\t\tlifecycle.push(step + ':after');\n\t\treturn lifecycle;\n\t}\n});\n})(typeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(deps, factory) {\n\t\tmodule.exports = factory.apply(this, deps.map(function(x) {\n\t\t\treturn require(x);\n\t\t}));\n\t}\n);","modules":[{"pos":183,"count":32,"depList":["when/when"],"factory":true,"argList":["when"],"id":"wire/lib/lifecycle"}]}