{"absId":"wire/lib/resolver","text":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){\ndefine(['when'], function(when) {\n\n\t'use strict';\n\n\tfunction Resolver(config) {\n\t\tthis._resolvers = config.resolvers;\n\t\tthis._pluginApi = config.pluginApi;\n\t}\n\n\tResolver.prototype = {\n\n\t\tisRef: function(it) {\n\t\t\treturn it && it.hasOwnProperty('$ref');\n\t\t},\n\n\t\tparse: function(it) {\n\t\t\treturn this.create(it.$ref, it);\n\t\t},\n\n\t\tcreate: function(name, options) {\n\t\t\tvar self, split, resolver;\n\n\t\t\tself = this;\n\n\t\t\tsplit = name.indexOf('!');\n\t\t\tresolver = name.substring(0, split);\n\t\t\tname = name.substring(split + 1);\n\n\t\t\treturn {\n\t\t\t\tresolver: resolver,\n\t\t\t\tname: name,\n\t\t\t\toptions: options,\n\t\t\t\tresolve: function() {\n\t\t\t\t\treturn self._resolve(resolver, name, options);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t_resolve: function(resolverName, name, options) {\n\t\t\tvar deferred, resolver;\n\n\t\t\tdeferred = when.defer();\n\n\t\t\tif (resolverName) {\n\t\t\t\tresolver = this._resolvers[resolverName];\n\n\t\t\t\tif (resolver) {\n\t\t\t\t\tresolver(deferred.resolver, name, options||{}, this._pluginApi);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.reject('No resolver plugin found: ' + resolverName);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tdeferred.reject('Cannot resolve ref: ' + name);\n\t\t\t}\n\n\t\t\treturn deferred.promise;\n\t\t}\n\t};\n\n\treturn Resolver;\n\n});\n})(typeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(deps, factory) {\n\t\tmodule.exports = factory.apply(this, deps.map(function(x) {\n\t\t\treturn require(x);\n\t\t}));\n\t}\n);","modules":[{"pos":183,"count":32,"depList":["when/when"],"factory":true,"argList":["when"],"id":"wire/lib/resolver"}]}