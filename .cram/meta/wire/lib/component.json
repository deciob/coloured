{"absId":"wire/lib/component","text":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){\ndefine(function() {\n\"use strict\";\n\n\tvar undef;\n\n\t/**\n\t * Creates an object by either invoking ctor as a function and returning the result,\n\t * or by calling new ctor().  It uses a simple heuristic to try to guess which approach\n\t * is the \"right\" one.\n\t *\n\t * @param ctor {Function} function or constructor to invoke\n\t * @param args {Array} array of arguments to pass to ctor in either case\n\t *\n\t * @return The result of invoking ctor with args, with or without new, depending on\n\t * the strategy selected.\n\t */\n\treturn function createComponent(ctor, args, forceConstructor) {\n\n\t\tvar begotten, ctorResult;\n\n\t\tif (forceConstructor || isConstructor(ctor)) {\n\t\t\tbegotten = Object.create(ctor.prototype);\n\t\t\tdefineConstructorIfPossible(begotten, ctor);\n\t\t\tctorResult = ctor.apply(begotten, args);\n\t\t\tif(ctorResult !== undef) {\n\t\t\t\tbegotten = ctorResult;\n\t\t\t}\n\n\t\t} else {\n\t\t\tbegotten = ctor.apply(undef, args);\n\n\t\t}\n\n\t\treturn begotten === undef ? null : begotten;\n\t};\n\n\t/**\n\t * Carefully sets the instance's constructor property to the supplied\n\t * constructor, using Object.defineProperty if available.  If it can't\n\t * set the constructor in a safe way, it will do nothing.\n\t *\n\t * @param instance {Object} component instance\n\t * @param ctor {Function} constructor\n\t */\n\tfunction defineConstructorIfPossible(instance, ctor) {\n\t\ttry {\n\t\t\tObject.defineProperty(instance, 'constructor', {\n\t\t\t\tvalue: ctor,\n\t\t\t\tenumerable: false\n\t\t\t});\n\t\t} catch(e) {\n\t\t\t// If we can't define a constructor, oh well.\n\t\t\t// This can happen if in envs where Object.defineProperty is not\n\t\t\t// available, or when using cujojs/poly or other ES5 shims\n\t\t}\n\t}\n\n\t/**\n\t * Determines whether the supplied function should be invoked directly or\n\t * should be invoked using new in order to create the object to be wired.\n\t *\n\t * @param func {Function} determine whether this should be called using new or not\n\t *\n\t * @returns {Boolean} true iff func should be invoked using new, false otherwise.\n\t */\n\tfunction isConstructor(func) {\n\t\tvar is = false, p;\n\t\tfor (p in func.prototype) {\n\t\t\tif (p !== undef) {\n\t\t\t\tis = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn is;\n\t}\n\n});\n})(typeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(factory) {\n\t\tmodule.exports = factory();\n\t}\n);","modules":[{"pos":183,"count":18,"factory":true,"id":"wire/lib/component"}]}